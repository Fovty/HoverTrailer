name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Extract version from tag
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Update version in Directory.Build.props
      run: |
        sed -i "s/<Version>.*<\/Version>/<Version>${VERSION}<\/Version>/g" Directory.Build.props
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${VERSION}<\/AssemblyVersion>/g" Directory.Build.props
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${VERSION}<\/FileVersion>/g" Directory.Build.props

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release --property:TreatWarningsAsErrors=false

    - name: Publish
      run: dotnet publish Fovty.Plugin.HoverTrailer/Fovty.Plugin.HoverTrailer.csproj --no-build --configuration Release --output ./publish

    - name: Create Release Package
      run: |
        # Create plugin package with proper naming convention
        cd publish
        zip -r "../HoverTrailer-${VERSION}-server.zip" .
        cd ..

        # Calculate MD5 checksum and generate timestamp
        echo "CHECKSUM=$(md5sum HoverTrailer-${VERSION}-server.zip | cut -d' ' -f1)" >> $GITHUB_ENV
        echo "TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

    - name: Extract Changelog Entry
      run: |
        # Extract changelog entry for current version if CHANGELOG.md exists
        if [ -f "CHANGELOG.md" ]; then
          changelog_entry=$(awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md | sed '/^$/d' | head -5 | tr '\n' ' ' | sed 's/["\\]/\\&/g')
        else
          changelog_entry=""
        fi

        if [ -z "$changelog_entry" ]; then
          changelog_entry="Release version ${VERSION}"
        fi
        echo "CHANGELOG_ENTRY=$changelog_entry" >> $GITHUB_ENV

    - name: Update Manifest
      run: |
        # Create new version entry for manifest
        python3 << 'EOF'
        import json
        import os

        version = os.environ['VERSION']
        changelog = os.environ['CHANGELOG_ENTRY']
        checksum = os.environ['CHECKSUM']
        timestamp = os.environ['TIMESTAMP']

        # Read current manifest (now an array)
        with open('manifest.json', 'r') as f:
            manifest = json.load(f)

        # Create new version entry
        new_entry = {
            "version": version,
            "changelog": changelog,
            "targetAbi": "10.10.0.0",
            "sourceUrl": f"https://github.com/Fovty/HoverTrailer/releases/download/v{version}/HoverTrailer-{version}-server.zip",
            "checksum": checksum,
            "timestamp": timestamp
        }

        # Insert new entry at the beginning of versions array (manifest is now an array)
        manifest[0]['versions'].insert(0, new_entry)

        # Write back to manifest
        with open('manifest.json', 'w') as f:
            json.dump(manifest, f, indent=2)

        print(f"Manifest updated successfully with version {version}")
        EOF

    - name: Commit Updated Manifest
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add manifest.json Directory.Build.props
        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update manifest and version for release v${VERSION}"
          git push origin HEAD:master
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        name: HoverTrailer v${{ env.VERSION }}
        body: |
          ## Changes in v${{ env.VERSION }}

          ${{ env.CHANGELOG_ENTRY }}

          ## Installation

          1. Download the `HoverTrailer-${{ env.VERSION }}-server.zip` file
          2. Extract to your Jellyfin plugins directory
          3. Restart Jellyfin server
          4. Enable the plugin in Jellyfin settings

          ## Checksums

          - **MD5**: `${{ env.CHECKSUM }}`
        files: |
          HoverTrailer-${{ env.VERSION }}-server.zip
        draft: false
        prerelease: false